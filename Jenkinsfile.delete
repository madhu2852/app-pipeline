import groovy.json.JsonOutput
import groovy.json.JsonSlurperClassic

pipeline {
    agent any
    options {
        timestamps()
        buildDiscarder(logRotator(daysToKeepStr: '90'))
        disableConcurrentBuilds()
    }
    environment {
        
        AWS_ACCESS_KEY_ID = credentials('secret-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('access-key')
        PIP_ENV = """${sh(
                    returnStdout: true,
                    script: '''
                        set +x
                        export PATH=~/.local/bin:$PATH
                        pip3 install pipenv --user > /dev/null
                        pipenv update > /dev/null
                        pipenv install boto3 > /dev/null
                    '''    
                        ).trim()}"""   
    }
    parameters {
        string(
            name: 'APP_FQDN',
            description: 'application fqdn',
            trim: true,
        )
        string(
            name: 'REGION',
            description: 'application fqdn',
            trim: true,
            defaultValue: 'us-east-1'
        )

    }
    stages {        
        stage('Preparation') { // GET THE LOAB BALANCER NAME, PORT and, CERT TO DELETE

            environment {
                RAW_DATA = """${sh(
                    returnStdout: true,
                    script: '''
                        set +x
                        export PATH=~/.local/bin:$PATH
                        pipenv run python3 ./get_item.py --region=${REGION} --fqdn=${APP_FQDN}
                    '''    
                        ).trim()}"""
                }
            steps {
                script {
                 def jsonObj = readJSON text: RAW_DATA
                 env.JSON_DATA = jsonObj
                 env.ELB =  jsonObj.elb
                 env.APP_ENVIRONMENT = jsonObj.env
                 env.CERT_ARN = jsonObj.cert
                 env.PORT = jsonObj.port
                 env.LISTENER_RULE_ARN = jsonObj.lstnr_rule_arn
                 env.TG_GROUP_ARN = jsonObj.target_grp_arn
                 env.FQDN = jsonObj.fqdn
                 env.DDB_TABLE = jsonObj.table_name
                 env.LISTENER_ARN = jsonObj.listerner_arn
                }
            }
        } 
        stage('Cleanup AWS Resources') {            
            steps {
                sh '''
                    export PATH=~/.local/bin:$PATH
                    pipenv run python3 ./delete_items.py \
                        --listener_rule_arn=${LISTENER_RULE_ARN} \
                        --target_group_arn=${TG_GROUP_ARN} \
                        --portnum=${PORT} \
                        --region=${REGION} \
                        --table_name=${DDB_TABLE} \
                        --json_data="${JSON_DATA}" \
                        --fqdn=${FQDN} \
                        --cert_arn=${CERT_ARN} \
                        --listener_arn=${LISTENER_ARN}
                 '''
                }
            }
        }
    post {
        cleanup {
            cleanWs(cleanWhenAborted: false)
        }
    }    
}
